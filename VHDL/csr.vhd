-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity csr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of csr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "csr,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.374000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=14,HLS_SYN_FF=1295,HLS_SYN_LUT=2139,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_4010000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4022000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000100010000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_401C000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011100000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4014000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010100000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rowptr11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rowptr11_ce0 : STD_LOGIC;
    signal rowptr11_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rowptr11_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal rowptr11_ce1 : STD_LOGIC;
    signal rowptr11_q1 : STD_LOGIC_VECTOR (2 downto 0);
    signal rowptr22_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rowptr22_ce0 : STD_LOGIC;
    signal rowptr22_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rowptr22_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal rowptr22_ce1 : STD_LOGIC;
    signal rowptr22_q1 : STD_LOGIC_VECTOR (2 downto 0);
    signal row1_1_fu_155_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row1_1_reg_320 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_171_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_reg_335 : STD_LOGIC_VECTOR (1 downto 0);
    signal istart_cast_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal iend_cast_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iend_cast_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_fu_190_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast_reg_350 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_199_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_reg_358 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_4_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val1_fu_233_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal val1_reg_373 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal jstart_cast_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal jend_cast_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal jend_cast_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal val2_fu_263_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal val2_reg_391 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_9_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_reg_396 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_reg_411 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal multprod_reg_416 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_421 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal empty_ce0 : STD_LOGIC;
    signal empty_we0 : STD_LOGIC;
    signal row1_reg_111 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal j1_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_fu_161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum_cast_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_3_fu_183_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal col1_fu_203_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal col1_fu_203_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_259_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal col2_fu_277_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_291_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_sum_fu_295_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component csr_dadd_64ns_64nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component csr_dmul_64ns_64ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component csr_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component csr_mux_42_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component csr_rowptr11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component csr_empty IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    rowptr11_U : component csr_rowptr11
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rowptr11_address0,
        ce0 => rowptr11_ce0,
        q0 => rowptr11_q0,
        address1 => rowptr11_address1,
        ce1 => rowptr11_ce1,
        q1 => rowptr11_q1);

    rowptr22_U : component csr_rowptr11
    generic map (
        DataWidth => 3,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rowptr22_address0,
        ce0 => rowptr22_ce0,
        q0 => rowptr22_q0,
        address1 => rowptr22_address1,
        ce1 => rowptr22_ce1,
        q1 => rowptr22_q1);

    empty_U : component csr_empty
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_addr_reg_396,
        ce0 => empty_ce0,
        we0 => empty_we0,
        d0 => tmp_i_reg_421,
        q0 => empty_q0);

    csr_dadd_64ns_64nbkb_U1 : component csr_dadd_64ns_64nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => multprod_reg_416,
        din1 => temp_reg_411,
        ce => ap_const_logic_1,
        dout => grp_fu_141_p2);

    csr_dmul_64ns_64ncud_U2 : component csr_dmul_64ns_64ncud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => val1_reg_373,
        din1 => val2_reg_391,
        ce => ap_const_logic_1,
        dout => grp_fu_145_p2);

    csr_mux_42_32_1_1_U3 : component csr_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_2,
        din2 => ap_const_lv32_1,
        din3 => ap_const_lv32_3,
        din4 => col1_fu_203_p5,
        dout => col1_fu_203_p6);

    csr_mux_42_64_1_1_U4 : component csr_mux_42_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_4010000000000000,
        din1 => ap_const_lv64_4022000000000000,
        din2 => ap_const_lv64_401C000000000000,
        din3 => ap_const_lv64_4014000000000000,
        din4 => tmp_5_reg_358,
        dout => val1_fu_233_p6);

    csr_mux_42_64_1_1_U5 : component csr_mux_42_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_4010000000000000,
        din1 => ap_const_lv64_4022000000000000,
        din2 => ap_const_lv64_401C000000000000,
        din3 => ap_const_lv64_4014000000000000,
        din4 => tmp_10_fu_259_p1,
        dout => val2_fu_263_p6);

    csr_mux_42_32_1_1_U6 : component csr_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_2,
        din2 => ap_const_lv32_1,
        din3 => ap_const_lv32_3,
        din4 => tmp_10_fu_259_p1,
        dout => col2_fu_277_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i1_reg_122 <= i_1_fu_311_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i1_reg_122 <= istart_cast_fu_175_p1;
            end if; 
        end if;
    end process;

    j1_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j1_reg_132 <= j_1_reg_401;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j1_reg_132 <= jstart_cast_fu_246_p1;
            end if; 
        end if;
    end process;

    row1_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row1_reg_111 <= row1_1_reg_320;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row1_reg_111 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    iend_cast_reg_345(2 downto 0) <= iend_cast_fu_179_p1(2 downto 0);
                    tmp_3_cast_reg_350(3 downto 2) <= tmp_3_cast_fu_190_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                j_1_reg_401 <= j_1_fu_305_p2;
                p_addr_reg_396 <= p_sum_cast_fu_300_p1(4 - 1 downto 0);
                val2_reg_391 <= val2_fu_263_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    jend_cast_reg_383(2 downto 0) <= jend_cast_fu_250_p1(2 downto 0);
                val1_reg_373 <= val1_fu_233_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                multprod_reg_416 <= grp_fu_145_p2;
                temp_reg_411 <= empty_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row1_1_reg_320 <= row1_1_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_335 <= tmp_1_fu_171_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_5_reg_358 <= tmp_5_fu_199_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_i_reg_421 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    iend_cast_reg_345(31 downto 3) <= "00000000000000000000000000000";
    tmp_3_cast_reg_350(1 downto 0) <= "00";
    tmp_3_cast_reg_350(5 downto 4) <= "00";
    jend_cast_reg_383(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_149_p2, ap_CS_fsm_state4, tmp_4_fu_194_p2, ap_CS_fsm_state6, tmp_9_fu_254_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((tmp_4_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((tmp_9_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_149_p2)
    begin
        if (((exitcond_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_149_p2)
    begin
        if (((exitcond_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col1_fu_203_p5 <= i1_reg_122(2 - 1 downto 0);

    empty_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            empty_ce0 <= ap_const_logic_1;
        else 
            empty_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            empty_we0 <= ap_const_logic_1;
        else 
            empty_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_149_p2 <= "1" when (row1_reg_111 = ap_const_lv3_4) else "0";
    i_1_fu_311_p2 <= std_logic_vector(unsigned(i1_reg_122) + unsigned(ap_const_lv32_1));
    iend_cast_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rowptr11_q1),32));
    istart_cast_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rowptr11_q0),32));
    j_1_fu_305_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j1_reg_132));
    jend_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rowptr22_q1),32));
    jstart_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rowptr22_q0),32));
        p_sum_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_sum_fu_295_p2),64));

    p_sum_fu_295_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_350) + unsigned(tmp_11_fu_291_p1));
    row1_1_fu_155_p2 <= std_logic_vector(unsigned(row1_reg_111) + unsigned(ap_const_lv3_1));
    rowptr11_address0 <= tmp_fu_161_p1(3 - 1 downto 0);
    rowptr11_address1 <= tmp_2_fu_166_p1(3 - 1 downto 0);

    rowptr11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rowptr11_ce0 <= ap_const_logic_1;
        else 
            rowptr11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rowptr11_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rowptr11_ce1 <= ap_const_logic_1;
        else 
            rowptr11_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rowptr22_address0 <= tmp_6_fu_217_p1(3 - 1 downto 0);
    rowptr22_address1 <= tmp_8_fu_228_p1(3 - 1 downto 0);

    rowptr22_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rowptr22_ce0 <= ap_const_logic_1;
        else 
            rowptr22_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rowptr22_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rowptr22_ce1 <= ap_const_logic_1;
        else 
            rowptr22_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_259_p1 <= j1_reg_132(2 - 1 downto 0);
    tmp_11_fu_291_p1 <= col2_fu_277_p6(6 - 1 downto 0);
    tmp_1_fu_171_p1 <= row1_reg_111(2 - 1 downto 0);
    tmp_2_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row1_1_fu_155_p2),64));
    tmp_3_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_183_p3),6));
    tmp_3_fu_183_p3 <= (tmp_1_reg_335 & ap_const_lv2_0);
    tmp_4_fu_194_p2 <= "1" when (signed(i1_reg_122) < signed(iend_cast_reg_345)) else "0";
    tmp_5_fu_199_p1 <= i1_reg_122(2 - 1 downto 0);
        tmp_6_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(col1_fu_203_p6),64));

    tmp_7_fu_222_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(col1_fu_203_p6));
        tmp_8_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_222_p2),64));

    tmp_9_fu_254_p2 <= "1" when (signed(j1_reg_132) < signed(jend_cast_reg_383)) else "0";
    tmp_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row1_reg_111),64));
end behav;
